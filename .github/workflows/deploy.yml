# .github/workflows/deploy.yml

name: Deploy OpenLetter to AWS

on:
  push:
    branches:
      - main 

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: SSH and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            # Ativa o modo de depuração do shell, que imprime cada comando antes de executá-lo
            set -x

            # Passo 1: Atualiza o repositório
            echo "--- Atualizando o repositório ---"
            if [ -d "/home/ubuntu/OpenLetter" ] ; then
              cd /home/ubuntu/OpenLetter
              git pull origin main
            else
              git clone https://github.com/AndreyCortez/OpenLetter.git /home/ubuntu/OpenLetter
            fi

            # Passo 2: Cria os arquivos .env no local correto
            echo "--- Criando arquivos de configuração ---"
            cd /home/ubuntu/OpenLetter/OpenLetterBackend
            
            # Mostra o diretório atual para confirmar que estamos no lugar certo
            pwd

            # Cria o arquivo .env para o backend Go
            # A MUDANÇA PRINCIPAL: Usar 'EOF' entre aspas simples impede que o shell 
            # interprete caracteres especiais como $ dentro do bloco.
            cat <<'EOF' > ./.env.production
            GO_ENV=production
            DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
            JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
            API_PORT=8080
            EOF

            # Cria o arquivo .env para o serviço do banco de dados
            cat <<'EOF' > ./db.env
            POSTGRES_USER=${{ secrets.PROD_POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}
            POSTGRES_DB=openletters
            EOF

            # Lista os arquivos para confirmar que foram criados
            echo "--- Verificando arquivos criados ---"
            ls -la

            # Passo 3: Executa o Docker Compose
            echo "--- Iniciando o deploy com Docker Compose ---"
            cd /home/ubuntu/AWSDeploy
            docker compose up -d --build --force-recreate --no-deps openletter-db openletter-backend openletter-frontend