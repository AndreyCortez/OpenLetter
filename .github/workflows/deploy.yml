# .github/workflows/deploy.yml

name: Deploy OpenLetter to AWS

on:
  push:
    branches:
      - main 

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: SSH and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            # Navega para a pasta principal do deploy
            cd /home/ubuntu/AwsDeployAndreyCortez
            git pull

            # Cria o arquivo .env para o backend Go usando os secrets
            # O comando 'cat <<EOF >' é uma forma segura de escrever um arquivo multi-linha
            cat <<EOF > ../OpenLetter/OpenLetterBackend/.env.production
            GO_ENV=production
            DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
            JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
            API_PORT=8080
            EOF

            # Cria um arquivo .env separado para o serviço do banco de dados
            cat <<EOF > ../OpenLetter/OpenLetterBackend/db/db.env
            POSTGRES_USER=${{ secrets.PROD_POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}
            POSTGRES_DB=openletters
            EOF

            # Atualiza o código fonte do OpenLetter (se estiver em outro repo)
            # Se o docker-compose estiver no mesmo repo do OpenLetter, este passo pode ser diferente
            cd /home/ubuntu/OpenLetter 
            git pull origin main

            # Volta para a pasta do compose e sobe os containers com as novas builds e configs
            cd /home/ubuntu/AwsDeployAndreyCortez
            echo "Recriando os containers do OpenLetter..."
            docker compose up -d --build --force-recreate --no-deps openletter-db openletter-backend openletter-frontend